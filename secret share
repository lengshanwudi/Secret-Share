//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Shamir Secret Share~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#include <stdio.h>
#include "iostream"
#include "gmp.h"
#include "ctime"
#include "math.h"
#include <time.h>
//#pragma comment(linker, "/NODEFAULTLIB:MSVCRTD.LIB")//调用库函数的直接方法
using namespace std;

#define PRIME_PROBABILITY 20
#define PRIME_BITLENGTH 260  //一般情况下，length < PRIME_BITLENGTH
#define SECRET_N 5
#define SECRET_K 3


void CreateBigPrime(mpz_t mpzPrime, int bits);//随机生成指定bit长度的大素数p；
void CreateCoef(mpz_t *x, unsigned N);//生成系数 a0, a1, a2...
void SplitSecret(mpz_t coef_array[], unsigned long x[], mpz_t p, mpz_t share[][2]);//分割秘密，生成 f0, f1, f2...
void Random_SharedSecrets_Gen(int key[]);//随机生成用于重构秘密 a0 的秘密碎片:（ai, fi）...
void Secret_Reconstruction(mpz_t secret_use[][2], mpz_t L, mpz_t p);//重构秘密 a0；

void main()
{
	cout<<"+++++++++++++++Shamir Secret Share Code, the threshold is ("<<SECRET_N<<", "<<SECRET_K <<")+++++++++++++++"<<endl;
	mpz_t p;
	int i,j;
	
	srand( (unsigned)time( NULL ) );//随机数种子

	mpz_init(p);//赋初值。。。

	
	mpz_t coef_array[SECRET_K];//储存系数 a0, a1, a2...
	mpz_t randm;
	mpz_init(randm);
	unsigned int length;//系数 a0, a1, a2...的bit长度
	length=256;//确保length < PRIME_BITLENGTH
	//CreateCoef(&x,length);
	
	mpz_t L;//L为重构后的消息；
	mpz_init(L);

	mpz_t share[SECRET_N][2];//储存分享后秘密，为一个二维数组；
	for(i=0;i<SECRET_N;i++)
	{
		mpz_init(share[i][0]);
		mpz_init(share[i][1]);
	}
	/* 一种可以实现赋值转换的方法
	mpz_t n;
	mpz_init_set_str(n, "170141183460469231731687303715884105728", 0);
	mpz_swap (x,n);//交换两个数的值
	gmp_printf("x1=%Zd\n",x);*/

   // 随机生成的秘密信息 a0 和 a1，a2,...
	cout<<"Step 1, Generate the original secret: "<<endl;
	cout<<"The shared secret is"<<": "<<endl;
	for(j=0;j<SECRET_K;j++)
	{
		mpz_init (coef_array[j]);
		CreateCoef(&randm,length);
		mpz_set (coef_array[j],randm);
		gmp_printf("a%d = %Zd\n", j, coef_array[j]);
	}
	//mpq_set (coef_array[j], x);
	//coef_array[j]=CreateCoef(&x,length); 不能直接赋值

	/* 用google测试例子代码段1，来源：http://en.wikipedia.org/wiki/Shamir's_Secret_Sharing
	//=============test================================================
	mpz_set_ui (coef_array[0], 1234);
	mpz_set_ui (coef_array[1],  166);
	mpz_set_ui (coef_array[2],   94);
	//=============test================================================*/
	cout<<endl<<"Step 2, Generate the prime p: "<<endl;
	cout<<"The prime number of the finite field is: "<<endl;
	CreateBigPrime(p,PRIME_BITLENGTH);

	gmp_printf("p = %Zd\n",p);
	cout<<endl;

	unsigned long  x[SECRET_N];// x_exp[SECRET_K]，x的指数（幂）；
	for(i=0;i<SECRET_N;i++)
	{
		//mpz_init(x[i]);
		//mpz_set_ui(x[i], i+1);
		//gmp_printf("x[%d]=%Zd\n", i, x[i]);
		x[i]=i+1;
		//printf("x[%d]=%d\n", i, x[i]);查看xi的值
	}
	//gmp_printf("x[%d]=%Zd\n", i, coef_array[0]);
	//mpz_mul(coef_array[0], coef_array[1], coef_array[2]);
	//
	cout<<"Step 3, Split secret: "<<endl;
    SplitSecret(coef_array, x, p, share);
	cout<<endl;
	/*for(int j=0;j<SECRET_N;j++)
	{
		gmp_printf("p=%Zd\n", coef_array[j]);
	}*/
	
	//+++++++++++++++++++++++++++++++选取要使用的秘钥++开始+++++++++++++++++++++++++++++++++++++++++
	int key[SECRET_N];//定义一个数组，用来存储重构秘密的序号；
	mpz_t secret_use[SECRET_K][2];//定义一个新的mpz_t 格式的二维数组存放新的用于重构秘密的密钥；
	for(i=0;i<SECRET_K;i++)
	{
		mpz_init(secret_use[i][0]);
		mpz_init(secret_use[i][1]);
	}
	for(i = 0; i < SECRET_N; i++)
		key[i] = i;
	
	Random_SharedSecrets_Gen(key);//生成随机序号
	
	//=============test================================================
	//key[0]=1;key[1]=3;key[2]=4;//google测试例子代码段2///////////////
	//=============test================================================
	//for(i=0;i<3;i++)//查看xi的值
		//cout<<key[i]<<endl;
	cout<<"Step 4, Randomly choose the uses secret phases: "<<endl;
	int tem=0;
	for(i = 0; i < SECRET_K; i++)//随机序号赋给新的下标
	{
		tem=key[i];
		mpz_set(secret_use[i][0], share[tem][0]);//mpz_set_si (mpz_t rop, signed long int op)
		mpz_set(secret_use[i][1], share[tem][1]);
	
	cout<<"The used secret U["<<i+1<<"] is: (";
	gmp_printf("%Zd", secret_use[i][0]);
	cout<<",";
		gmp_printf("%Zd", secret_use[i][1]);
		cout<<")"<<endl;
	}
	//+++++++++++++++++++++++++++++++选取要使用的秘钥++结束+++++++++++++++++++++++++++++++++++++++++
	
	//********************************************************************************************

	//+++++++++++++++++++++++++++++++秘密重构部分+++++++++++++++++++++++++++++++++++++++++++

	//for(i=0;i<SECRET_K;i++)
		//mpz_init(secret_use[i][0]);
	cout<<endl<<"Step 5, Reconstruct the secret: "<<endl;
	Secret_Reconstruction(secret_use, L, p);
	
	cout<<endl<<"Step 6, Verify phase: "<<endl;
	i = mpz_cmp(coef_array[0], L);
	//int mpz_cmp (mpz_t op1, mpz_t op2)比较op1 和op2。若op1 > op2 则返回正值，若op1 = op2 则返回0，若op1 < op2 则返回负值。
	if(i==0)
		cout<<"L = a0"<<endl<<"***** Reconstruct secret success! *****"<<endl;
	else
		cout<<"L != a0"<<endl<<"***** Reconstruct secret fail! *****"<<endl;
	//system("pause");
}

void CreateBigPrime(mpz_t mpzPrime,int bits)//随即生成指定bit长度的大素数p；
{
	int i,last_rand=0;
	char *char_rand = new char [bits+1];
	char_rand[0] = '1';
	char_rand[bits] = '\0';
	mpz_init(mpzPrime);
	
	do
	{
		for(i=1;i<bits;i++)
		{
			if(rand()==last_rand)
				cout<<"SRAND ERROR! --short time! same rand number!"<<endl;
			last_rand = rand();
			char_rand[i] = '0'+(0x01&last_rand);
		}
			
		mpz_set_str(mpzPrime,char_rand,2);
		mpz_nextprime(mpzPrime,mpzPrime);
	}while(0==mpz_probab_prime_p(mpzPrime,PRIME_PROBABILITY));
	
	return;
}

void CreateCoef(mpz_t *x,unsigned N)//生成系数 a0, a1, a2...
{
	unsigned long seed;
	mpz_t tmp;
	mpz_init(tmp);
	mpz_set_ui(*x,2);
	mpz_pow_ui(*x,*x,N-1);
	seed=rand()%(1<<31)+100;
	gmp_randstate_t state;
	gmp_randinit_default(state);
	gmp_randseed_ui(state,seed++);
	mpz_urandomb(tmp,state,N-1);
	mpz_add(*x,*x,tmp);
	//gmp_printf("x=%Zd\n", x);
}


void SplitSecret(mpz_t coef_array[], unsigned long x[], mpz_t p, mpz_t share[][2])//分割秘密，生成 f0, f1, f2...
{
	unsigned long exp;
	mpz_t accum;
	mpz_init(accum);
	//gmp_printf("初始accum=%Zd\n", accum);//查看初始值
	for(int j=0; j<SECRET_N;j++)
	{
		exp=0;
		mpz_set(accum, coef_array[0]);
		mpz_t temp;
		mpz_init(temp);
		for(int i=1; i<SECRET_K; i++)
		{
			
			exp=pow((double)x[j], i);
			mpz_mul_ui (temp, coef_array[i], exp);//mpz_mul_ui (mpz_t rop, mpz_t op1, unsigned long int op2)  置rop 为op1*op2
			mpz_mod(temp, temp, p);//计算 x[i]^i mod p 的值。
			mpz_add(accum, temp, accum); //计算a[i-1] +　x[i]^i　的值。
			mpz_mod(accum, accum, p);//计算 a[i-1] +　x[i]^i mod p 的值。
			//	gmp_printf("****accum=%Zd\n", accum);   
		}
		mpz_set_si(share[j][0], x[j]);//mpz_set_si (mpz_t rop, signed long int op)
		mpz_set(share[j][1], accum);
		cout<<"The shared secret S["<<j+1<<"] is: ("<<x[j]<<",";
		gmp_printf("%Zd", share[j][1]);
		cout<<")"<<endl;
	}
	return;
}

	//生成 k 个(0, n)之间的随机数；
void Random_SharedSecrets_Gen(int key[])//随机生成用于重构秘密 a0 的秘密碎片:（ai, fi）...
{
	int i,t;
	
	int temp;
	for(i = 0; i < SECRET_K; i++)
	{

		t = i + rand() % (SECRET_N-i);//  rand(i,SECRET_N -1);
				//printf("################%d\n",t);

		temp=key[i];
		key[i]=key[t];
		key[t]=temp;
		//swap(x[i], x[t]);
		//printf("key[%d] = %d\n",i,key[i]);
	}
	//return 0;
}


//秘密重构阶段，由随机组成的k个参与人共同计算出分享的秘密:a0;
//L0=(x-x1)*(x-x2)/(x0-x1)/(x0-x2);
//void Secret_Reconstruction（mpz_t secret_use[][2]）

void Secret_Reconstruction(mpz_t secret_use[][2], mpz_t L, mpz_t p)//重构秘密 a0；
{
	int i, j;
	mpz_t sigma_up[SECRET_K], sigma_down[SECRET_K];
	mpz_t temp, temp_L_lable_add;
	mpz_t L_lable[SECRET_K];
	mpz_t L_lable_den;//分母
	mpz_t L_lable_mem;//分子
	mpz_init(temp);
	mpz_init(temp_L_lable_add);
	mpz_init(L_lable_den);
	mpz_init(L_lable_mem);
	for( i=0;i<SECRET_K;i++)//赋初值
	{
		mpz_init(sigma_up[i]);
		mpz_set_si(sigma_up[i], 1);//mpz_set_si (mpz_t rop, signed long int op)
		mpz_init(sigma_down[i]);
		mpz_set_si(sigma_down[i], 1);
		mpz_init(L_lable[i]);
		//mpz_init(temp_L_lable_add[i]);
		//mpz_set_si(L_lable[i], 1);
	}
	for(i=0;i<SECRET_K;i++)//获得分子分母的连乘积；
	{
		for( j=0;j<SECRET_K;j++)
		{
			if(j==i)
				continue;
			else
			{
				mpz_mul(sigma_up[i],sigma_up[i],secret_use[j][0]);
				mpz_sub(temp, secret_use[i][0], secret_use[j][0]);//mpz_sub (mpz_t rop, mpz_t op1, mpz_t op2)
				mpz_mul(sigma_down[i],sigma_down[i], temp);
			}
		}
		//gmp_printf("sigma_up[%d] = %Zd\n",i, sigma_up[i]);
		//gmp_printf("sigma_down[%d] = %Zd\n", i,sigma_down[i]);
	}

	mpz_set_si(temp, 1);//temp=1;
	for(i=0;i<SECRET_K;i++)//求secret_use1*up1*down2*down3*...
	{
		mpz_invert(temp, sigma_down[i], p);//求分母的模逆；
		//mpz_invert(mpz_t rop, mpz_t op1, mpz_t op2) 计算op1 模op2 的逆，并将结果置于rop。如果逆存在则返回非0 值，
		//且rop 满足0 < rop < op2。如果逆不存在，那么返回0，此时rop是无意义的。
		//mpz_powm_ui(temp, sigma_down[i], )//mpz_powm_ui(mpz_t rop,mpz_t base,unsigned long int exp,mpz_t mod)
		mpz_mul(temp, temp, secret_use[i][1]);//乘以系数f_i;
		mpz_mod(temp, temp, p);
		mpz_mul(temp, temp, sigma_up[i]);//乘以分子
		mpz_mod(temp, temp, p);

		mpz_add(L, L, temp);
				
		mpz_set_si(temp, 1);//temp=1;
	}
		//mpz_cdiv_r (mpz_t r, mpz_t n, mpz_t d) 
		//mpz_cdiv_q (mpz_t q, mpz_t n, mpz_t d) 用d 除n，得到商q 与/或余数r。
	mpz_mod(L, L, p);
	cout<<"The reconstructed secret is: ";
	gmp_printf("\nL = %Zd\n", L);
	return;
}
